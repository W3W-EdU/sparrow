// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package git

import (
	"context"
	"github.com/go-git/go-billy/v5"
	git "github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/storage"
	"sync"
)

// Ensure, that remoteOperatorMock does implement remoteOperator.
// If this is not the case, regenerate this file with moq.
var _ remoteOperator = &remoteOperatorMock{}

// remoteOperatorMock is a mock implementation of remoteOperator.
//
//	func TestSomethingThatUsesremoteOperator(t *testing.T) {
//
//		// make and configure a mocked remoteOperator
//		mockedremoteOperator := &remoteOperatorMock{
//			CloneContextFunc: func(ctx context.Context, store storage.Storer, fs billy.Filesystem, o *git.CloneOptions) (*repository, error) {
//				panic("mock out the CloneContext method")
//			},
//			PullContextFunc: func(ctx context.Context, w *git.Worktree, o *git.PullOptions) error {
//				panic("mock out the PullContext method")
//			},
//			PushContextFunc: func(ctx context.Context, r *repository, o *git.PushOptions) error {
//				panic("mock out the PushContext method")
//			},
//		}
//
//		// use mockedremoteOperator in code that requires remoteOperator
//		// and then make assertions.
//
//	}
type remoteOperatorMock struct {
	// CloneContextFunc mocks the CloneContext method.
	CloneContextFunc func(ctx context.Context, store storage.Storer, fs billy.Filesystem, o *git.CloneOptions) (*repository, error)

	// PullContextFunc mocks the PullContext method.
	PullContextFunc func(ctx context.Context, w *git.Worktree, o *git.PullOptions) error

	// PushContextFunc mocks the PushContext method.
	PushContextFunc func(ctx context.Context, r *repository, o *git.PushOptions) error

	// calls tracks calls to the methods.
	calls struct {
		// CloneContext holds details about calls to the CloneContext method.
		CloneContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Store is the store argument value.
			Store storage.Storer
			// Fs is the fs argument value.
			Fs billy.Filesystem
			// O is the o argument value.
			O *git.CloneOptions
		}
		// PullContext holds details about calls to the PullContext method.
		PullContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// W is the w argument value.
			W *git.Worktree
			// O is the o argument value.
			O *git.PullOptions
		}
		// PushContext holds details about calls to the PushContext method.
		PushContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *repository
			// O is the o argument value.
			O *git.PushOptions
		}
	}
	lockCloneContext sync.RWMutex
	lockPullContext  sync.RWMutex
	lockPushContext  sync.RWMutex
}

// CloneContext calls CloneContextFunc.
func (mock *remoteOperatorMock) CloneContext(ctx context.Context, store storage.Storer, fs billy.Filesystem, o *git.CloneOptions) (*repository, error) {
	if mock.CloneContextFunc == nil {
		panic("remoteOperatorMock.CloneContextFunc: method is nil but remoteOperator.CloneContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Store storage.Storer
		Fs    billy.Filesystem
		O     *git.CloneOptions
	}{
		Ctx:   ctx,
		Store: store,
		Fs:    fs,
		O:     o,
	}
	mock.lockCloneContext.Lock()
	mock.calls.CloneContext = append(mock.calls.CloneContext, callInfo)
	mock.lockCloneContext.Unlock()
	return mock.CloneContextFunc(ctx, store, fs, o)
}

// CloneContextCalls gets all the calls that were made to CloneContext.
// Check the length with:
//
//	len(mockedremoteOperator.CloneContextCalls())
func (mock *remoteOperatorMock) CloneContextCalls() []struct {
	Ctx   context.Context
	Store storage.Storer
	Fs    billy.Filesystem
	O     *git.CloneOptions
} {
	var calls []struct {
		Ctx   context.Context
		Store storage.Storer
		Fs    billy.Filesystem
		O     *git.CloneOptions
	}
	mock.lockCloneContext.RLock()
	calls = mock.calls.CloneContext
	mock.lockCloneContext.RUnlock()
	return calls
}

// PullContext calls PullContextFunc.
func (mock *remoteOperatorMock) PullContext(ctx context.Context, w *git.Worktree, o *git.PullOptions) error {
	if mock.PullContextFunc == nil {
		panic("remoteOperatorMock.PullContextFunc: method is nil but remoteOperator.PullContext was just called")
	}
	callInfo := struct {
		Ctx context.Context
		W   *git.Worktree
		O   *git.PullOptions
	}{
		Ctx: ctx,
		W:   w,
		O:   o,
	}
	mock.lockPullContext.Lock()
	mock.calls.PullContext = append(mock.calls.PullContext, callInfo)
	mock.lockPullContext.Unlock()
	return mock.PullContextFunc(ctx, w, o)
}

// PullContextCalls gets all the calls that were made to PullContext.
// Check the length with:
//
//	len(mockedremoteOperator.PullContextCalls())
func (mock *remoteOperatorMock) PullContextCalls() []struct {
	Ctx context.Context
	W   *git.Worktree
	O   *git.PullOptions
} {
	var calls []struct {
		Ctx context.Context
		W   *git.Worktree
		O   *git.PullOptions
	}
	mock.lockPullContext.RLock()
	calls = mock.calls.PullContext
	mock.lockPullContext.RUnlock()
	return calls
}

// PushContext calls PushContextFunc.
func (mock *remoteOperatorMock) PushContext(ctx context.Context, r *repository, o *git.PushOptions) error {
	if mock.PushContextFunc == nil {
		panic("remoteOperatorMock.PushContextFunc: method is nil but remoteOperator.PushContext was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *repository
		O   *git.PushOptions
	}{
		Ctx: ctx,
		R:   r,
		O:   o,
	}
	mock.lockPushContext.Lock()
	mock.calls.PushContext = append(mock.calls.PushContext, callInfo)
	mock.lockPushContext.Unlock()
	return mock.PushContextFunc(ctx, r, o)
}

// PushContextCalls gets all the calls that were made to PushContext.
// Check the length with:
//
//	len(mockedremoteOperator.PushContextCalls())
func (mock *remoteOperatorMock) PushContextCalls() []struct {
	Ctx context.Context
	R   *repository
	O   *git.PushOptions
} {
	var calls []struct {
		Ctx context.Context
		R   *repository
		O   *git.PushOptions
	}
	mock.lockPushContext.RLock()
	calls = mock.calls.PushContext
	mock.lockPushContext.RUnlock()
	return calls
}
