// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package traceroute

import (
	"context"
	"sync"
)

// Ensure, that TracerMock does implement Tracer.
// If this is not the case, regenerate this file with moq.
var _ Tracer = &TracerMock{}

// TracerMock is a mock implementation of Tracer.
//
//	func TestSomethingThatUsesTracer(t *testing.T) {
//
//		// make and configure a mocked Tracer
//		mockedTracer := &TracerMock{
//			RunFunc: func(ctx context.Context, address string) ([]Hop, error) {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedTracer in code that requires Tracer
//		// and then make assertions.
//
//	}
type TracerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, address string) ([]Hop, error)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Address is the address argument value.
			Address string
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *TracerMock) Run(ctx context.Context, address string) ([]Hop, error) {
	if mock.RunFunc == nil {
		panic("TracerMock.RunFunc: method is nil but Tracer.Run was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Address string
	}{
		Ctx:     ctx,
		Address: address,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(ctx, address)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedTracer.RunCalls())
func (mock *TracerMock) RunCalls() []struct {
	Ctx     context.Context
	Address string
} {
	var calls []struct {
		Ctx     context.Context
		Address string
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
